from django.shortcuts import render

# Create your views here.




def _parseV(self, field_list):
    """_parseV(self, field_list)
    ~V | [PROPIEDAD_ARCHIVO] | VERSION_FORMATO[ \ DDMMAAAA] | [PROGRAMA_EMISION] |
        [CABECERA] \ {ROTULO_IDENTIFICACION \} | [JUEGO_CARACTERES] | [COMENTARIO] | [TIPO INFORMACIÓN] |
        [NÚMERO CERTIFICACIÓN] | [FECHA CERTIFICACIÓN] | [URL_BASE] |
    field_list: field list of the record
        0- V :Property and Version
        1- [File_Owner]
        2- Format_Version[\DDMMYYYY]
        3- [Program_Generator]
        4- [Header]\{Title\}
        5- [Chaters_set]
        6- [Comment]
        7- [Data type], it can be: 'database', 'budget', 'certification' or 'database update'
        8- [Number budget certificate]
        9- [Date budget certificate]
        10- [Url where documents and images can be found]
    """
    if self.__statistics.records != 1:
        print utils.mapping(_("The 'V' record (Property and Version) " \
                              "must be the first record in the file but it is the " \
                              "number: $1"), (self.__statistics.records,))
        print _("The default values were taken and this V record is " \
                "ignored")
        return
    # _____number of fields_____
    # Any INFORMATION after last field separator is ignored
    if len(field_list) > 10:
        field_list = field_list[:10]
    # If there are no sufficient fields, the fields are added
    # with empty value:""
    else:
        field_list = field_list + [u""] * (10 - len(field_list))
    # control character are erased: end of line, tab, space
    # only leading and trailing whitespace in owner, generator, comment
    # _____Fields_____
    _record_type = self.delete_control_space(field_list[0])
    _owner = field_list[1].strip()
    _owner = self.delete_control(_owner)
    _version_date = self.delete_control_space(field_list[2])
    _generator = field_list[3].strip()
    _generator = self.delete_control(_generator)
    _header_title = field_list[4].strip()
    _header_title = self.delete_control(_header_title)
    _character_set = self.delete_control_space(field_list[5])
    _comment = field_list[6].strip(u"\t \n\r")
    _data_type = self.delete_control_space(field_list[7])
    _number_certificate = self.delete_control_space(field_list[8])
    __date_certificate = self.delete_control_space(field_list[9])
    # _____Owner_____
    self.__budget.setOwner(_owner)
    # _____Version-Date_____
    _version_date = _version_date.split(u"\\")
    _file_format = _version_date[0]
    if _file_format in self.__format_list:
        self.__file_format = _file_format
        print utils.mapping(_("FIEBDC format: $1"), (_file_format,))

    if len(_version_date) > 1:
        _date = _version_date[1]
        if _date != u"":
            _parsed_date = self.parseDate(_date)
            if _parsed_date is not None:
                self.__budget.setDate(_parsed_date)
    # _____Generator_____
    # ignored field
    print utils.mapping(_("FIEBDC file generated by $1"), (_generator,))
    # _____Header_Title_____
    _header_title = _header_title.split(u"\\")
    _header_title = [_title.strip() for _title in _header_title]
    _header = _header_title.pop(0)
    _header = [_item.encode("utf8") for _item in _header]
    _title = []
    for _title_index in _header_title:
        if _title_index != u"":
            _title.append(_title_index)
    _title = [_item.encode("utf8") for _item in _title]
    if _header != u"":
        self.__budget.setTitleList([_header, _title])
    # _____Characters_set_____
    # field parsed in readFile method
    # _____Comment_____
    if _comment != u"":
        self.__budget.setComment(_comment.encode("utf8"))
    # _____Data type_____
    # 1 -> Base data.
    # 2 -> Budget.
    # 3 -> Budget certificate.
    # 4 -> Base date update.
    try:
        _data_type = int(_data_type)
    except ValueError:
        _data_type = ""
    if _data_type == 3:
        # _____Number budget certificate_____
        try:
            _number_certificate = int(_number_certificate)
        except ValueError:
            _number_certificate = ""
        # _____Date budget certificate_____
        if _date_certificate != "":
            _parsed_date_certificate = self.parseDate(_date_certificate)
            if _parsed_date_certificate is None:
                _date_certificate = ""
            else:
                _date_certificate = _parsed_date_certificate
        self.__budget.setBudgetype(_data_type)
        self.__budget.setCertificateOrder(_number_certificate)
        self.__budget.setCertificateDate(_parsed_date_cerfificate)
    elif _data_type != "":
        self.__budget.setBudgeType(_data_type)
    self.__statistics.valid = self.__statistics.valid + 1
